@page
@model razor.Pages.WorldmapModel
@{ Layout = null; }

<script>
    $("#load").hide();
</script>

@{if (Model.error != null)
    {
        <h2 class="text-danger">Error.</h2>
        <h3 class="text-danger">An error occurred while processing your request.</h3>
        <p>
            <strong>Issue: </strong> <code>@Model.error</code>
        </p>
        return;
    }
}

<img class="legend" src="~/images/legend.svg" alt="Legend">

<svg id="svg1"></svg>
@Html.AjaxGrid(Url.Page("CountryGrid"), new { id = "country-grid" })
<script>
var format = d3.format(",");

// Set tooltips
var tip = d3.tip()
            .attr('class', 'd3-tip')
            .offset([-10, 0])
            .html(function(d) {
              return "<strong>Country: </strong><span class='details'>" + d.properties.name + "<br></span>" + "<strong>Attacks: </strong><span class='details'>" + format(d.population) +"</span>";
            })

var margin = {top: 0, right: 0, bottom: 0, left: 0},
            width = 940 - margin.left - margin.right,
            height = 700 - margin.top - margin.bottom;

var color2 = d3.scaleThreshold()
    .domain([1,5,10,100])
    .range(["rgb(222,235,247)", "rgb(158,202,225)", "rgb(33,113,181)","rgb(255, 180, 188)","rgb(255,0,0)"]);

var path2 = d3.geoPath();

var svg2 = d3.select("#svg1")
            .attr("width", width)
			.attr("height", height)
			.append('g')
            .attr('class', 'map');

var projection = d3.geoMercator()
                   .scale(130)
                  .translate( [width / 2, height / 1.5]);

var path2 = d3.geoPath().projection(projection);

svg2.call(tip);

queue()
    .defer(d3.json, "world_countries.json")
    //.defer(d3.tsv, "world_population.tsv")
    .await(ready);

function ready(error, data) {

  var population = d3.tsvParse('@Model.JSONcountries');
  var populationById = {};

  population.forEach(function(d) { populationById[d.id] = +d.population; });
  data.features.forEach(function(d) { 	if(populationById[d.id] > 0)
										  d.population = populationById[d.id];
										else d.population = 0;});

  svg2.append("g")
      .attr("class", "countries")
    .selectAll("path")
      .data(data.features)
    .enter().append("path")
      .attr("d", path2)
	  .style("fill", function(d) { if(populationById[d.id] > 0)	return color2(populationById[d.id]);
	  								else return  color2(0);})
      .style('stroke', 'white')
      .style('stroke-width', 1.5)
      .style("opacity",0.8)
      // tooltips
        .style("stroke","white")
        .style('stroke-width', 0.3)
        .on('mouseover',function(d){
          tip.show(d);

          d3.select(this)
            .style("opacity", 1)
            .style("stroke","white")
            .style("stroke-width",3);
        })
        .on('mouseout', function(d){
          tip.hide(d);

          d3.select(this)
            .style("opacity", 0.8)
            .style("stroke","white")
            .style("stroke-width",0.3);
        });

  svg2.append("path")
      .datum(topojson.mesh(data.features, function(a, b) { return a.id !== b.id; }))
       // .datum(topojson.mesh(data.features, function(a, b) { return a !== b; }))
      .attr("class", "names")
	  .attr("d", path2);


    }


        [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
            new MvcGrid(element, {
                requestType: 'get',
            });
        });
</script>

